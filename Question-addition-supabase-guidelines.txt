рдирдорд╕реНрддреЗ\! рдпрд╣ рдПрдХ рдмреЗрд╣рддрд░реАрди *workflow* (рдХрд╛рд░реНрдпрдкреНрд░рд╡рд╛рд╣) рд╣реИред рдЖрдкрдХреЗ *team members* (рдЯреАрдо рдХреЗ рд╕рджрд╕реНрдпреЛрдВ) рдХреЗ рд▓рд┐рдП *questions* (рдкреНрд░рд╢реНрди) *upload* (рдЕрдкрд▓реЛрдб) рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рдПрдХ *detailed guide* (рд╡рд┐рд╕реНрддреГрдд рдЧрд╛рдЗрдб) рджреА рдЧрдИ рд╣реИред

рдпрд╣ *guide* (рдЧрд╛рдЗрдб) рдорд╛рдирддреА рд╣реИ рдХрд┐ *team member* (рдЯреАрдо рдХрд╛ рд╕рджрд╕реНрдп) рдпрд╣ *process* (рдкреНрд░рдХреНрд░рд┐рдпрд╛) рдкрд╣рд▓реА рдмрд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реИред

-----

## **Guide: Supabase рдореЗрдВ рдирдП Questions рдХреИрд╕реЗ Upload рдХрд░реЗрдВ**

рдирдорд╕реНрддреЗ *Team* (рдЯреАрдо),

рд╣рдорд╛рд░реЗ *Quiz App* (рдХреНрд╡рд┐рдЬрд╝ рдРрдк) рдореЗрдВ рдирдП *questions* (рдкреНрд░рд╢реНрди) рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЗрди *steps* (рдЪрд░рдгреЛрдВ) рдХрд╛ *follow* (рдкрд╛рд▓рди) рдХрд░реЗрдВред рд╣рдорд╛рд░рд╛ *process* (рдкреНрд░рд╡рд╛рд╣) рдпрд╣ *ensure* (рд╕реБрдирд┐рд╢реНрдЪрд┐рдд) рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд╕рд╛рд░рд╛ *data* (рдбреЗрдЯрд╛) *clean* (рд╕реНрд╡рдЪреНрдЫ) рдФрд░ *structured* (рд╕рдВрд░рдЪрд┐рдд) рд╣реЛред

*Process* (рдкреНрд░рд╡рд╛рд╣) рд╣реИ: **JSON File рддреИрдпрд╛рд░ рдХрд░реЗрдВ тЮФ Python Script рд╕реЗ CSV рдореЗрдВ рдмрджрд▓реЗрдВ тЮФ Supabase рдореЗрдВ Upload рдХрд░реЗрдВред**

-----

### **Section 1: One-Time Setup (рдпрд╣ рд╕рд┐рд░реНрдл рдкрд╣рд▓реА рдмрд╛рд░ рдХрд░рдирд╛ рд╣реИ)**

рдпрджрд┐ рдЖрдкрдХреЗ *laptop* (рд▓реИрдкрдЯреЙрдк) рдкрд░ *project environment* (рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ) *set up* (рд╕реЗрдЯ рдЕрдк) рдирд╣реАрдВ рд╣реИ, рддреЛ рдкрд╣рд▓реЗ рдпрд╣ рдХрд░реЗрдВред

#### **Step 1.1: Python Install рдХрд░реЗрдВ**

рдЖрдкрдХреЛ *Python* (рдкрд╛рдпрдерди) рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрдЧреАред

1.  [python.org/downloads](https://www.python.org/downloads/) рдкрд░ рдЬрд╛рдПрдБ рдФрд░ *Python* (рдкрд╛рдпрдерди) рдХрд╛ *latest version* (рдирд╡реАрдирддрдо рд╕рдВрд╕реНрдХрд░рдг) *download* (рдбрд╛рдЙрдирд▓реЛрдб) рдХрд░реЗрдВред
2.  *Install* (рдЗрдВрд╕реНрдЯреЙрд▓) рдХрд░рддреЗ рд╕рдордп, **"Add Python to PATH"** (рдкрд╛рдпрдерди рдХреЛ рдкрд╛рде рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ) *checkbox* (рдЪреЗрдХрдмреЙрдХреНрд╕) рдХреЛ *check* (рдЪреЗрдХ) рдХрд░рдирд╛ **рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ**ред

#### **Step 2.2: Project Folder рдмрдирд╛рдПрдБ**

1.  рдЕрдкрдиреЗ *computer* (рдХрдВрдкреНрдпреВрдЯрд░) рдкрд░ рдПрдХ *folder* (рдлрд╝реЛрд▓реНрдбрд░) рдмрдирд╛рдПрдБ рдЬрд╣рд╛рдБ рдЖрдк *conversion* (рд░реВрдкрд╛рдВрддрд░рдг) рдХрд╛ рдХрд╛рдо рдХрд░реЗрдВрдЧреЗред (рдЬреИрд╕реЗ: `D:\quiz-uploads`)ред

#### **Step 1.3: Conversion Script (рд░реВрдкрд╛рдВрддрд░рдг рд╕реНрдХреНрд░рд┐рдкреНрдЯ) Save (рд╕рд╣реЗрдЬреЗрдВ) рдХрд░реЗрдВ**

1.  рдЙрд╕реА `D:\quiz-uploads` *folder* (рдлрд╝реЛрд▓реНрдбрд░) рдореЗрдВ, `convert_new_data.py` рдирд╛рдо рдХреА рдПрдХ *file* (рдлрд╝рд╛рдЗрд▓) рдмрдирд╛рдПрдБред
2.  рдЙрд╕ *file* (рдлрд╝рд╛рдЗрд▓) рдореЗрдВ *exactly* (рдмрд┐рд▓рдХреБрд▓) рдпрд╣ *Python code* (рдкрд╛рдпрдерди рдХреЛрдб) *paste* (рдкреЗрд╕реНрдЯ) рдХрд░реЗрдВред рдпрд╣ *script* (рд╕реНрдХреНрд░рд┐рдкреНрдЯ) *Hindi characters* (рд╣рд┐рдВрджреА рд╡рд░реНрдгреЛрдВ), *arrays* (рдРрд░реЗ), рдФрд░ рд╣рдорд╛рд░реЗ *full schema* (рдкреВрд░реНрдг рд╕реНрдХреАрдорд╛) ( `examDateShift` рд╕рд╣рд┐рдд) рдХреЛ *handle* (рд╕рдВрднрд╛рд▓рдиреЗ) рдХреЗ рд▓рд┐рдП *configure* (рдХреЙрдиреНрдлрд╝рд┐рдЧрд░) рдХреА рдЧрдИ рд╣реИ:

<!-- end list -->

```python
import json
import csv

# --- Configuration (рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди) ---
# рдЕрдкрдиреА JSON рдлрд╝рд╛рдЗрд▓ рдХрд╛ рдирд╛рдо рдпрд╣рд╛рдБ рдмрджрд▓реЗрдВ
JSON_FILE_PATH = 'questions.json' 
# рдпрд╣ CSV рдлрд╝рд╛рдЗрд▓ рдмрдирд╛рдПрдЧрд╛
CSV_FILE_PATH = 'questions_for_supabase.csv' 
# --- End Configuration (рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕рдорд╛рдкреНрдд) ---

def format_pg_array_correctly(py_list):
    """
    Python list рдХреЛ Supabase CSV Importer рдХреЗ рд▓рд┐рдП required format 
    (e.g., {"item1","item2"}) рдореЗрдВ рдмрджрд▓рддрд╛ рд╣реИред
    """
    if not py_list:
        return "{}"
    
    formatted_list = []
    for item in py_list:
        # 1. рдЖрдЗрдЯрдо рдХреЛ рд╕реНрдЯреНрд░рд┐рдВрдЧ рдореЗрдВ рдмрджрд▓реЗрдВ
        item_str = str(item)
        # 2. рдЖрдЗрдЯрдо рдХреЗ рдЕрдВрджрд░ рдореМрдЬреВрдж double quotes рдХреЛ escape рдХрд░реЗрдВ (e.g., " becomes "")
        # PostgreSQL standard escaping for strings inside arrays
        item_str = item_str.replace('\\', '\\\\').replace('"', '\\"')
        # 3. CORRECTED LOGIC: рд╣рд░ рдЖрдЗрдЯрдо рдХреЛ double quotes рдореЗрдВ wrap (рд░реИрдк) рдХрд░реЗрдВ
        formatted_list.append(f'"{item_str}"')
        
    return "{" + ",".join(formatted_list) + "}"

print(f"Starting conversion of {JSON_FILE_PATH} with CORRECTED script...")

try:
    with open(JSON_FILE_PATH, 'r', encoding='utf-8') as f_in, \
         open(CSV_FILE_PATH, 'w', encoding='utf-8-sig', newline='') as f_out:

        questions_data = json.load(f_in)
        
        header = [
            'v1_id', 'subject', 'topic', 'subTopic', 'examName', 'examYear','examDateShift',
            'difficulty', 'questionType', 'question', 'question_hi',
            'options', 'options_hi', 'correct', 'tags', 'explanation'
        ]
        
        writer = csv.DictWriter(f_out, fieldnames=header)
        writer.writeheader()

        count = 0
        for q in questions_data:
            try:
                # Use the new, corrected function
                options_pg = format_pg_array_correctly(q.get('options', []))
                options_hi_pg = format_pg_array_correctly(q.get('options_hi', []))
                tags_pg = format_pg_array_correctly(q.get('tags', []))
                
                explanation_jsonb = json.dumps(q.get('explanation', {}))

                writer.writerow({
                    'v1_id': q.get('id'),
                    'subject': q.get('classification', {}).get('subject'),
                    'topic': q.get('classification', {}).get('topic'),
                    'subTopic': q.get('classification', {}).get('subTopic'),
                    'examName': q.get('sourceInfo', {}).get('examName'),
                    'examYear': q.get('sourceInfo', {}).get('examYear'),
                    'examDateShift': q.get('sourceInfo', {}).get('examDateShift'),
                    'difficulty': q.get('properties', {}).get('difficulty'),
                    'questionType': q.get('properties', {}).get('questionType'),
                    'question': q.get('question'),
                    'question_hi': q.get('question_hi'),
                    'options': options_pg,
                    'options_hi': options_hi_pg,
                    'correct': q.get('correct'),
                    'tags': tags_pg,
                    'explanation': explanation_jsonb
                })
                count += 1
            except Exception as e:
                print(f"Error processing question {q.get('id')}: {e}")

    print(f"Successfully converted {count} questions to {CSV_FILE_PATH} using the correct format.")

except FileNotFoundError:
    print(f"Error: {JSON_FILE_PATH} not found.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
```

-----

### **Section 2: The Upload Process (рдпрд╣ рд╣рд░ рдмрд╛рд░ рдХрд░рдирд╛ рд╣реИ)**

рдЬрдм рднреА рдЖрдкрдХреЗ рдкрд╛рд╕ *upload* (рдЕрдкрд▓реЛрдб) рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдирдП *questions* (рдкреНрд░рд╢реНрди) рд╣реЛрдВ, рддреЛ рдЗрди *steps* (рдЪрд░рдгреЛрдВ) рдХрд╛ *follow* (рдкрд╛рд▓рди) рдХрд░реЗрдВред

#### **Step 2.1: Prepare Your JSON File (JSON рдлрд╝рд╛рдЗрд▓ рддреИрдпрд╛рд░ рдХрд░реЗрдВ)**

1.  рдЖрдкрдХреЗ рд╕рднреА рдирдП *questions* (рдкреНрд░рд╢реНрди) (рдЬреИрд╕реЗ `ECO66`) рдПрдХ *single JSON file* (рдПрдХрд▓ рдЬреЗрдПрд╕рдУрдПрди рдлрд╝рд╛рдЗрд▓) рдореЗрдВ рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред
2.  *Ensure* (рд╕реБрдирд┐рд╢реНрдЪрд┐рдд) рдХрд░реЗрдВ рдХрд┐ *file* (рдлрд╝рд╛рдЗрд▓) рдПрдХ *Array* (рдРрд░реЗ) рд╣реЛ (рдпрд╛рдиреА, рдпрд╣ `[` рд╕реЗ рд╢реБрд░реВ рдФрд░ `]` рдкрд░ рдЦрддреНрдо рд╣реЛ), рдЬреИрд╕рд╛ рдХрд┐ рдЖрдкрдХреЗ *example* (рдЙрджрд╛рд╣рд░рдг) рдореЗрдВ рд╣реИред
3.  рдЗрд╕ *file* (рдлрд╝рд╛рдЗрд▓) рдХреЛ *Rename* (рдирд╛рдо рдмрджрд▓реЗрдВ) рдХрд░реЗрдВ: **`new_questions.json`**
4.  рдЗрд╕ `new_questions.json` *file* (рдлрд╝рд╛рдЗрд▓) рдХреЛ рдЕрдкрдиреЗ `D:\quiz-uploads` *folder* (рдлрд╝реЛрд▓реНрдбрд░) рдореЗрдВ *copy* (рдХреЙрдкреА) рдХрд░реЗрдВред

#### **Step 2.2: Run the Conversion Script (рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдЪрд▓рд╛рдПрдБ)**

1.  **Command Prompt (cmd)** (рдХрдорд╛рдВрдб рдкреНрд░реЙрдореНрдкреНрдЯ (рд╕реАрдПрдордбреА)) рдЦреЛрд▓реЗрдВред
2.  рдЕрдкрдиреЗ *project folder* (рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдлрд╝реЛрд▓реНрдбрд░) рдкрд░ рдЬрд╛рдПрдБ:
    ```cmd
    D:
    cd D:\quiz-uploads
    ```
3.  *Python script* (рдкрд╛рдпрдерди рд╕реНрдХреНрд░рд┐рдкреНрдЯ) рдХреЛ *run* (рд░рди) рдХрд░реЗрдВ:
    ```cmd
    python convert_new_data.py
    ```
4.  *Script* (рд╕реНрдХреНрд░рд┐рдкреНрдЯ) *run* (рд░рди) рд╣реЛрдЧреА рдФрд░ рдПрдХ *success message* (рд╕рдлрд▓рддрд╛ рд╕рдВрджреЗрд╢) рджрд┐рдЦрд╛рдПрдЧреАред
5.  рдЖрдкрдХреЗ `D:\quiz-uploads` *folder* (рдлрд╝реЛрд▓реНрдбрд░) рдореЗрдВ рдПрдХ рдирдИ *file* (рдлрд╝рд╛рдЗрд▓) рдмрди рдЬрд╛рдПрдЧреА: **`upload_this_file.csv`**

#### **Step 2.3: Upload CSV to Supabase (CSV рдХреЛ Supabase рдкрд░ Upload рдХрд░реЗрдВ)**

1.  рдЕрдкрдиреЗ *Supabase project* (рд╕реБрдкрд╛рдмреЗрд╕ рдкреНрд░реЛрдЬреЗрдХреНрдЯ) рдореЗрдВ *Login* (рд▓реЙрдЧ рдЗрди) рдХрд░реЗрдВред
2.  *Left sidebar* (рдмрд╛рдПрдБ рд╕рд╛рдЗрдбрдмрд╛рд░) рдкрд░ **Table Editor** (рддрд╛рд▓рд┐рдХрд╛ рд╕рдВрдкрд╛рджрдХ) (ЁЯЧДя╕П рдЖрдЗрдХрди) рдкрд░ рдЬрд╛рдПрдБред
3.  `questions` *table* (рддрд╛рд▓рд┐рдХрд╛) рдкрд░ *Click* (рдХреНрд▓рд┐рдХ) рдХрд░реЗрдВред
4.  *Table* (рддрд╛рд▓рд┐рдХрд╛) рдХреЗ *top* (рд╢реАрд░реНрд╖) рдкрд░, **"Insert"** (рд╕рдореНрдорд┐рд▓рд┐рдд рдХрд░реЗрдВ) *button* (рдмрдЯрди) рдкрд░ *click* (рдХреНрд▓рд┐рдХ) рдХрд░реЗрдВ, рдлрд┐рд░ **"Import data from CSV"** (рд╕реАрдПрд╕рд╡реА рд╕реЗ рдбреЗрдЯрд╛ рдЖрдпрд╛рдд рдХрд░реЗрдВ) рдЪреБрдиреЗрдВред
5.  *Box* (рдмреЙрдХреНрд╕) рдкрд░ *click* (рдХреНрд▓рд┐рдХ) рдХрд░реЗрдВ рдФрд░ рдЕрдкрдиреА `upload_this_file.csv` *file* (рдлрд╝рд╛рдЗрд▓) (рдЬреЛ `D:\quiz-uploads` рдореЗрдВ рд╣реИ) *select* (рдЪрдпрдирд┐рдд) рдХрд░реЗрдВред
6.  *Supabase* (рд╕реБрдкрд╛рдмреЗрд╕) *data* (рдбреЗрдЯрд╛) рдХрд╛ *preview* (рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди) рджрд┐рдЦрд╛рдПрдЧрд╛ред *Ensure* (рд╕реБрдирд┐рд╢реНрдЪрд┐рдд) рдХрд░реЗрдВ рдХрд┐ *column headers* (рдХреЙрд▓рдо рд╣реЗрдбрд░) рд╕рд╣реА *match* (рдореЗрд▓) рдХрд░ рд░рд╣реЗ рд╣реИрдВред
7.  *Scroll* (рд╕реНрдХреНрд░реЙрд▓) рдХрд░реЗрдВ рдФрд░ *green* (рд╣рд░реЗ) **"Import data"** (рдбреЗрдЯрд╛ рдЖрдпрд╛рдд рдХрд░реЗрдВ) *button* (рдмрдЯрди) рдкрд░ *click* (рдХреНрд▓рд┐рдХ) рдХрд░реЗрдВред

-----

### **Section 3: Final Verification (рдЕрдВрддрд┐рдо рд╕рддреНрдпрд╛рдкрди)**

1.  *Import* (рдЖрдпрд╛рдд) *successful* (рд╕рдлрд▓) рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж, `questions` *table* (рддрд╛рд▓рд┐рдХрд╛) рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдБред
2.  *Table* (рддрд╛рд▓рд┐рдХрд╛) рдХреЗ *bottom* (рдиреАрдЪреЗ) *scroll* (рд╕реНрдХреНрд░реЙрд▓) рдХрд░реЗрдВред *Row count* (рдкрдВрдХреНрддрд┐ рдЧрдгрдирд╛) рдмрдврд╝ рдЬрд╛рдиреА рдЪрд╛рд╣рд┐рдП (рдЬреИрд╕реЗ, `914` рд╕реЗ `915` рдпрд╛ рдЕрдзрд┐рдХ)ред
3.  *New questions* (рдирдП рдкреНрд░рд╢реНрдиреЛрдВ) рдХреЛ *double-check* (рджреЛрд╣рд░рд╛ рдЬрд╛рдВрдЪ) рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, `created_at` *column* (рдХреЙрд▓рдо) рдкрд░ *click* (рдХреНрд▓рд┐рдХ) рдХрд░рдХреЗ *table* (рддрд╛рд▓рд┐рдХрд╛) рдХреЛ *Sort Descending* (рдЕрд╡рд░реЛрд╣реА рдХреНрд░рдо рдореЗрдВ рдХреНрд░рдордмрджреНрдз рдХрд░реЗрдВ) (Z-A) рдХрд░реЗрдВред
4.  рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЕрднреА *upload* (рдЕрдкрд▓реЛрдб) рдХрд┐рдП рдЧрдП рдирдП *questions* (рдкреНрд░рд╢реНрди) *top* (рд╢реАрд░реНрд╖) рдкрд░ рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреЗред
5.  *Check* (рдЬрд╛рдВрдЪ) рдХрд░реЗрдВ рдХрд┐ *Hindi text* (рд╣рд┐рдВрджреА рдЯреЗрдХреНрд╕реНрдЯ) рд╕рд╣реА рджрд┐рдЦ рд░рд╣рд╛ рд╣реИ рдФрд░ `options` (рд╡рд┐рдХрд▓реНрдк) / `tags` (рдЯреИрдЧ) *columns* (рдХреЙрд▓рдо) рдореЗрдВ *grey "pills"* (рдЧреНрд░реЗ "рдкрд┐рд▓реНрд╕") (рдРрд░реЗ) рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВред

-----

### **Troubleshooting (рд╕рдорд╕реНрдпрд╛ рдирд┐рд╡рд╛рд░рдг)**

  * **Error (рддреНрд░реБрдЯрд┐): `violates not-null constraint` (рдиреЙрдЯ-рдирд▓ рдмрд╛рдзрд╛ рдХрд╛ рдЙрд▓реНрд▓рдВрдШрди рдХрд░рддрд╛ рд╣реИ)**
      * **Meaning (рдЕрд░реНрде):** рдЗрд╕рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдЖрдкрдХреА `new_questions.json` *file* (рдлрд╝рд╛рдЗрд▓) рдореЗрдВ рдХрд┐рд╕реА *question* (рдкреНрд░рд╢реНрди) рдХрд╛ рдПрдХ *required field* (рдЖрд╡рд╢реНрдпрдХ рдлрд╝реАрд▓реНрдб) (рдЬреИрд╕реЗ `subject` рдпрд╛ `question`) *missing* (рдЧрд╛рдпрдм) рдпрд╛ *empty* (рдЦрд╛рд▓реА) рд╣реИред
      * **Solution (рд╕рдорд╛рдзрд╛рди):** рдЕрдкрдиреА `new_questions.json` *file* (рдлрд╝рд╛рдЗрд▓) рдХреЛ *Fix* (рдареАрдХ) рдХрд░реЗрдВ, *script* (рд╕реНрдХреНрд░рд┐рдкреНрдЯ) рдХреЛ рдлрд┐рд░ рд╕реЗ *run* (рд░рди) рдХрд░реЗрдВ, рдФрд░ *new CSV* (рдирдИ рд╕реАрдПрд╕рд╡реА) рдХреЛ *re-upload* (рдкреБрдирдГ рдЕрдкрд▓реЛрдб) рдХрд░реЗрдВред